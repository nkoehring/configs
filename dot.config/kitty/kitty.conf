font_family        monofur
bold_font          auto
italic_font        auto
bold_italic_font   auto
font_size          11.0

# adjust_line_height  0
# adjust_column_width 0

# symbol_map U+E0A0-U+E0A2,U+E0B0-U+E0B3 PowerlineSymbols
# box_drawing_scale 0.001, 1, 1.5, 2

cursor #aca4a1
cursor_text_color background
cursor_shape block

# cursor_blink_interval      0.5
# cursor_stop_blinking_after 15.0

# scrollback_lines 2000
# scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER

# wheel_scroll_multiplier 5.0

url_color #0087BD
url_style curly
#: can be one of: none, single, double, curly

# open_url_modifiers kitty_mod
# open_url_with default

copy_on_select yes
# rectangle_select_modifiers ctrl+alt
# select_by_word_characters :@-./_~?&=%+#

click_interval 0.3
mouse_hide_wait 2.0
focus_follows_mouse yes

repaint_delay 16
#: Delay between screen updates. (16ms ~ 60FPS)

input_delay 3
#: Delay (in ms) before program input is processed.

sync_to_monitor yes

enable_audio_bell no
visual_bell_duration 0.0
window_alert_on_bell yes
bell_on_tab no

remember_window_size  no
initial_window_width  90c
initial_window_height 40c

enabled_layouts tall:bias=60,fat:bias=70,stack

# window_resize_step_cells 2
# window_resize_step_lines 2
window_border_width 3.0
draw_minimal_borders yes
window_margin_width 0.0
# single_window_margin_width -1000.0
window_padding_width 4.0

active_border_color #3f2e26
inactive_border_color #333
bell_border_color #ff5a00
inactive_text_alpha 0.5

tab_bar_edge bottom
tab_bar_margin_width 0.0
tab_bar_style fade
#: The tab bar style, can be one of: fade or separator.

tab_fade 0.2 0.5 0.8 1
# tab_separator " â”‡"

active_tab_foreground   #aca4a1
active_tab_background   #3f2e26
active_tab_font_style   bold-italic
inactive_tab_foreground #3f2e26
inactive_tab_background #2a180e
inactive_tab_font_style normal

background #2a180e
foreground #aca4a1
background_opacity         1.0
dynamic_background_opacity no
dim_opacity 0.5
selection_foreground #000000
selection_background #FFFACD

# black
color0 #2b2b2b
color8 #424242

# red
color1 #ba9897
color9 #d0b9b9

# green
color2 #97ba98
color10 #b9d0b9

# yellow
color3 #b9ba97
color11 #d0d0b9

# blue
color4 #9897ba
color12 #b9b9d0

# magenta
color5 #ba97b9
color13 #d0b9d0

# cyan
color6 #97b9ba
color14 #b9d0d0

# white
color7 #d2d2d2
color15 #ffffff

shell .
editor .
close_on_child_death no
allow_remote_control yes

# env
#: Specify environment variables to set in all child processes.

# startup_session none
# clipboard_control write-clipboard write-primary

#: Allow programs running in kitty to read and write from the
#: clipboard. You can control exactly which actions are allowed. The
#: set of possible actions is: write-clipboard read-clipboard write-
#: primary read-primary The default is to allow writing to the
#: clipboard and primary selection. Note that enabling the read
#: functionality is a security risk as it means that any program, even
#: one running on a remote server via SSH can read your clipboard.

# term xterm-kitty

#: The value of the TERM environment variable to set. Changing this
#: can break many terminal programs, only change it if you know what
#: you are doing, not because you read some advice on Stack Overflow
#: to change it.

# macos_titlebar_color system
# macos_hide_titlebar no
# x11_hide_window_decorations no
# macos_option_as_alt yes
# macos_hide_from_tasks no
# macos_quit_when_last_window_closed no
# macos_window_resizable yes

#: For a list of key names, see: GLFW keys
#: <http://www.glfw.org/docs/latest/group__keys.html>. The name to use
#: is the part after the GLFW_KEY_ prefix. For a list of modifier
#: names, see: GLFW mods
#: <http://www.glfw.org/docs/latest/group__mods.html>

#: On Linux you can also use XKB key names to bind keys that are not
#: supported by GLFW. See XKB keys
#: <https://github.com/xkbcommon/libxkbcommon/blob/master/xkbcommon/xkbcommon-
#: keysyms.h> for a list of key names. The name to use is the part
#: after the XKB_KEY_ prefix. Note that you should only use an XKB key
#: name for keys that are not present in the list of GLFW keys.

#: Finally, you can use raw system key codes to map keys. To see the
#: system key code for a key, start kitty with the kitty --debug-
#: keyboard option. Then kitty will output some debug text for every
#: key event. In that text look for ``native_code`` the value of that
#: becomes the key name in the shortcut. For example:

#: .. code-block:: none

#:     on_key_input: glfw key: 65 native_code: 0x61 action: PRESS mods: 0x0 text: 'a'

#: Here, the key name for the A key is 0x61 and you can use it with::

#:     map ctrl+0x61 something

#: to map ctrl+a to something.

#: You can use the special action no_op to unmap a keyboard shortcut
#: that is assigned in the default configuration.

#: You can combine multiple actions to be triggered by a single
#: shortcut, using the syntax below::

#:     map key combine <separator> action1 <separator> action2 <separator> action3 ...

#: For example::

#:     map kitty_mod+e combine : new_window : next_layout

#: this will create a new window and switch to the next available
#: layout

#: You can use multi-key shortcuts using the syntax shown below::

#:     map key1>key2>key3 action

#: For example::

#:     map ctrl+f>2 set_font_size 20

# kitty_mod ctrl+shift

#: The value of kitty_mod is used as the modifier for all default
#: shortcuts, you can change it in your kitty.conf to change the
#: modifiers for all the default shortcuts.

# clear_all_shortcuts no

#: You can have kitty remove all shortcut definition seen up to this
#: point. Useful, for instance, to remove the default shortcuts.

#: Clipboard {{{

# map kitty_mod+c  copy_to_clipboard
# map kitty_mod+v  paste_from_clipboard
# map kitty_mod+s  paste_from_selection
# map shift+insert paste_from_selection
# map kitty_mod+o  pass_selection_to_program

#: You can also pass the contents of the current selection to any
#: program using pass_selection_to_program. By default, the system's
#: open program is used, but you can specify your own, for example::

#:     map kitty_mod+o pass_selection_to_program firefox

#: You can pass the current selection to a terminal program running in
#: a new kitty window, by using the @selection placeholder::

#:     map kitty_mod+y new_window less @selection

#: }}}

#: Scrolling {{{

# map kitty_mod+up        scroll_line_up
# map kitty_mod+k         scroll_line_up
# map kitty_mod+down      scroll_line_down
# map kitty_mod+j         scroll_line_down
# map kitty_mod+page_up   scroll_page_up
# map kitty_mod+page_down scroll_page_down
# map kitty_mod+home      scroll_home
# map kitty_mod+end       scroll_end
# map kitty_mod+h         show_scrollback

#: You can send the contents of the current screen + history buffer as
#: stdin to an arbitrary program using the placeholders @text (which
#: is the plain text) and @ansi (which includes text styling escape
#: codes). For only the current screen, use @screen or @ansi_screen.
#: For example, the following command opens the scrollback buffer in
#: less in a new window::

#:     map kitty_mod+y new_window @ansi less +G -R

#: }}}

#: Window management {{{

# map kitty_mod+enter new_window

#: You can open a new window running an arbitrary program, for
#: example::

#:     map kitty_mod+y      new_window mutt

#: You can open a new window with the current working directory set to
#: the working directory of the current window using::

#:     map ctrl+alt+enter    new_window_with_cwd

#: You can open a new window that is allowed to control kitty via the
#: kitty remote control facility by prefixing the command line with @.
#: Any programs running in that window will be allowed to control
#: kitty. For example::

#:     map ctrl+enter new_window @ some_program

map kitty_mod+n new_os_window
map kitty_mod+w close_window
map kitty_mod+left  next_window
map kitty_mod+right previous_window
map kitty_mod+alt+left move_window_forward
map kitty_mod+alt+right move_window_backward
map kitty_mod+` move_window_to_top
map kitty_mod+r start_resizing_window
map kitty_mod+1 first_window
map kitty_mod+2 second_window
map kitty_mod+3 third_window
map kitty_mod+4 fourth_window
map kitty_mod+5 fifth_window
map kitty_mod+6 sixth_window
map kitty_mod+7 seventh_window
map kitty_mod+8 eighth_window
map kitty_mod+9 ninth_window
map kitty_mod+0 tenth_window
#: }}}

#: Tab management {{{

map kitty_mod+t new_tab
map kitty_mod+q close_tab
map kitty_mod+] next_tab
map kitty_mod+[ previous_tab
map kitty_mod+{ move_tab_forward
map kitty_mod+} move_tab_backward
map kitty_mod+alt+t set_tab_title

#: You can also create shortcuts to go to specific tabs, with 1 being
#: the first tab::

#:     map ctrl+alt+1 goto_tab 1
#:     map ctrl+alt+2 goto_tab 2

#: Just as with new_window above, you can also pass the name of
#: arbitrary commands to run when using new_tab and use
#: new_tab_with_cwd.
#: }}}

#: Layout management {{{

# map kitty_mod+l next_layout

#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack
#: }}}

#: Font sizes {{{

#: You can change the font size for all top-level kitty windows at a
#: time or only the current one.

# map kitty_mod+equal     change_font_size all +2.0
# map kitty_mod+minus     change_font_size all -2.0
# map kitty_mod+backspace change_font_size all 0

#: To setup shortcuts for specific font sizes::

#:     map kitty_mod+f6 change_font_size all 10.0

#: To setup shortcuts to change only the current window's font size::

#:     map kitty_mod+f6 change_font_size current 10.0
#: }}}

#: Select and act on visible text {{{

#: Use the hints kitten to select text and either pass it to an
#: external program or insert it into the terminal or copy it to the
#: clipboard.

# map kitty_mod+e kitten hints

#: Open a currently visible URL using the keyboard. The program used
#: to open the URL is specified in open_url_with.

# map kitty_mod+p>f kitten hints --type path --program -

#: Select a path/filename and insert it into the terminal. Useful, for
#: instance to run git commands on a filename output from a previous
#: git command.

# map kitty_mod+p>shift+f kitten hints --type path

#: Select a path/filename and open it with the default open program.

# map kitty_mod+p>l kitten hints --type line --program -

#: Select a line of text and insert it into the terminal. Use for the
#: output of things like: ls -1

# map kitty_mod+p>w kitten hints --type word --program -

#: Select words and insert into terminal.

# map kitty_mod+p>h kitten hints --type hash --program -

#: Select something that looks like a hash and insert it into the
#: terminal. Useful with git, which uses sha1 hashes to identify
#: commits


#: The hints kitten has many more modes of operation that you can map
#: to different shortcuts. For a full description see kittens/hints.
#: }}}

#: Miscellaneous {{{

# map kitty_mod+f11    toggle_fullscreen
# map kitty_mod+u      kitten unicode_input
# map kitty_mod+f2     edit_config_file
# map kitty_mod+escape kitty_shell window

#: Open the kitty shell in a new window/tab/overlay/os_window to
#: control kitty using commands.

# map kitty_mod+a>m    set_background_opacity +0.1
# map kitty_mod+a>l    set_background_opacity -0.1
# map kitty_mod+a>1    set_background_opacity 1
# map kitty_mod+a>d    set_background_opacity default
# map kitty_mod+delete clear_terminal reset active

#: You can create shortcuts to clear/reset the terminal. For example::

#:     map kitty_mod+f9 clear_terminal reset active
#:     map kitty_mod+f10 clear_terminal clear active
#:     map kitty_mod+f11 clear_terminal scrollback active

#: These will reset screen/clear screen/clear screen+scrollback
#: respectively. If you want to operate on all windows instead of just
#: the current one, use all instead of :italic`active`.


#: You can tell kitty to send arbitrary (UTF-8) encoded text to the
#: client program when pressing specified shortcut keys. For example::

#:     map ctrl+alt+a send_text all Special text

#: This will send "Special text" when you press the ctrl+alt+a key
#: combination.  The text to be sent is a python string literal so you
#: can use escapes like \x1b to send control codes or \u21fb to send
#: unicode characters (or you can just input the unicode characters
#: directly as UTF-8 text). The first argument to send_text is the
#: keyboard modes in which to activate the shortcut. The possible
#: values are normal or application or kitty or a comma separated
#: combination of them.  The special keyword all means all modes. The
#: modes normal and application refer to the DECCKM cursor key mode
#: for terminals, and kitty refers to the special kitty extended
#: keyboard protocol.

#: Another example, that outputs a word and then moves the cursor to
#: the start of the line (same as pressing the Home key)::

#:     map ctrl+alt+a send_text normal Word\x1b[H
#:     map ctrl+alt+a send_text application Word\x1bOH

#: }}}

# }}}
